/* This file was generated by the ServiceGenerator.
 * The ServiceGenerator is Copyright (c) 2016 Google Inc.
 */

//
//  GTLQueryZeppaclientapi.m
//

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   zeppaclientapi/v1
// Description:
//   This is an API
// Classes:
//   GTLQueryZeppaclientapi (45 custom class methods, 12 custom properties)

#import "GTLQueryZeppaclientapi.h"

#import "GTLZeppaclientapiClientInfo.h"
#import "GTLZeppaclientapiCollectionResponseDeviceInfo.h"
#import "GTLZeppaclientapiCollectionResponseEventComment.h"
#import "GTLZeppaclientapiCollectionResponseEventTag.h"
#import "GTLZeppaclientapiCollectionResponseEventTagFollow.h"
#import "GTLZeppaclientapiCollectionResponseInviteGroup.h"
#import "GTLZeppaclientapiCollectionResponsePhotoInfo.h"
#import "GTLZeppaclientapiCollectionResponseZeppaEvent.h"
#import "GTLZeppaclientapiCollectionResponseZeppaEventToUserRelationship.h"
#import "GTLZeppaclientapiCollectionResponseZeppaNotification.h"
#import "GTLZeppaclientapiCollectionResponseZeppaUserInfo.h"
#import "GTLZeppaclientapiCollectionResponseZeppaUserToUserRelationship.h"
#import "GTLZeppaclientapiDeviceInfo.h"
#import "GTLZeppaclientapiEventComment.h"
#import "GTLZeppaclientapiEventTag.h"
#import "GTLZeppaclientapiEventTagFollow.h"
#import "GTLZeppaclientapiInviteGroup.h"
#import "GTLZeppaclientapiKey.h"
#import "GTLZeppaclientapiPhotoInfo.h"
#import "GTLZeppaclientapiZeppaEvent.h"
#import "GTLZeppaclientapiZeppaEventToUserRelationship.h"
#import "GTLZeppaclientapiZeppaFeedback.h"
#import "GTLZeppaclientapiZeppaNotification.h"
#import "GTLZeppaclientapiZeppaUser.h"
#import "GTLZeppaclientapiZeppaUserInfo.h"
#import "GTLZeppaclientapiZeppaUserToUserRelationship.h"

@implementation GTLQueryZeppaclientapi

@dynamic cursor, deviceType, fields, filter, identifier, idToken, jsonArgs,
         limit, ordering, relationshipId, requestedParentId, tagId;

+ (NSDictionary *)parameterNameMap {
  NSDictionary *map = @{
    @"identifier" : @"id"
  };
  return map;
}

#pragma mark - Service level methods
// These create a GTLQueryZeppaclientapi object.

+ (instancetype)queryForFetchCurrentZeppaUserWithIdToken:(NSString *)idToken {
  NSString *methodName = @"zeppaclientapi.fetchCurrentZeppaUser";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.idToken = idToken;
  query.expectedObjectClass = [GTLZeppaclientapiZeppaUser class];
  return query;
}

+ (instancetype)queryForFetchZeppaUserInfoByParentIdWithIdToken:(NSString *)idToken
                                              requestedParentId:(long long)requestedParentId {
  NSString *methodName = @"zeppaclientapi.fetchZeppaUserInfoByParentId";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.idToken = idToken;
  query.requestedParentId = requestedParentId;
  query.expectedObjectClass = [GTLZeppaclientapiZeppaUserInfo class];
  return query;
}

+ (instancetype)queryForGetClientInfoWithDeviceType:(NSString *)deviceType {
  NSString *methodName = @"zeppaclientapi.getClientInfo";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.deviceType = deviceType;
  query.expectedObjectClass = [GTLZeppaclientapiClientInfo class];
  return query;
}

+ (instancetype)queryForGetDeviceInfoWithIdentifier:(long long)identifier
                                            idToken:(NSString *)idToken {
  NSString *methodName = @"zeppaclientapi.getDeviceInfo";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.identifier = identifier;
  query.idToken = idToken;
  query.expectedObjectClass = [GTLZeppaclientapiDeviceInfo class];
  return query;
}

+ (instancetype)queryForGetEventCommentWithIdentifier:(long long)identifier
                                              idToken:(NSString *)idToken {
  NSString *methodName = @"zeppaclientapi.getEventComment";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.identifier = identifier;
  query.idToken = idToken;
  query.expectedObjectClass = [GTLZeppaclientapiEventComment class];
  return query;
}

+ (instancetype)queryForGetEventTagFollowWithIdentifier:(long long)identifier
                                                idToken:(NSString *)idToken {
  NSString *methodName = @"zeppaclientapi.getEventTagFollow";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.identifier = identifier;
  query.idToken = idToken;
  query.expectedObjectClass = [GTLZeppaclientapiEventTagFollow class];
  return query;
}

+ (instancetype)queryForGetZeppaEventWithIdentifier:(long long)identifier
                                            idToken:(NSString *)idToken {
  NSString *methodName = @"zeppaclientapi.getZeppaEvent";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.identifier = identifier;
  query.idToken = idToken;
  query.expectedObjectClass = [GTLZeppaclientapiZeppaEvent class];
  return query;
}

+ (instancetype)queryForGetZeppaNotificationWithIdentifier:(long long)identifier
                                                   idToken:(NSString *)idToken {
  NSString *methodName = @"zeppaclientapi.getZeppaNotification";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.identifier = identifier;
  query.idToken = idToken;
  query.expectedObjectClass = [GTLZeppaclientapiZeppaNotification class];
  return query;
}

+ (instancetype)queryForGetZeppaUserToUserRelationshipWithIdToken:(NSString *)idToken
                                                   relationshipId:(long long)relationshipId {
  NSString *methodName = @"zeppaclientapi.getZeppaUserToUserRelationship";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.idToken = idToken;
  query.relationshipId = relationshipId;
  query.expectedObjectClass = [GTLZeppaclientapiZeppaUserToUserRelationship class];
  return query;
}

+ (instancetype)queryForInsertDeviceInfoWithObject:(GTLZeppaclientapiDeviceInfo *)object
                                           idToken:(NSString *)idToken {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"zeppaclientapi.insertDeviceInfo";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.idToken = idToken;
  query.expectedObjectClass = [GTLZeppaclientapiDeviceInfo class];
  return query;
}

+ (instancetype)queryForInsertEventCommentWithObject:(GTLZeppaclientapiEventComment *)object
                                             idToken:(NSString *)idToken {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"zeppaclientapi.insertEventComment";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.idToken = idToken;
  query.expectedObjectClass = [GTLZeppaclientapiEventComment class];
  return query;
}

+ (instancetype)queryForInsertEventTagWithObject:(GTLZeppaclientapiEventTag *)object
                                         idToken:(NSString *)idToken {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"zeppaclientapi.insertEventTag";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.idToken = idToken;
  query.expectedObjectClass = [GTLZeppaclientapiEventTag class];
  return query;
}

+ (instancetype)queryForInsertEventTagFollowWithObject:(GTLZeppaclientapiEventTagFollow *)object
                                               idToken:(NSString *)idToken {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"zeppaclientapi.insertEventTagFollow";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.idToken = idToken;
  query.expectedObjectClass = [GTLZeppaclientapiEventTagFollow class];
  return query;
}

+ (instancetype)queryForInsertPhotoInfoWithObject:(GTLZeppaclientapiPhotoInfo *)object
                                          idToken:(NSString *)idToken {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"zeppaclientapi.insertPhotoInfo";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.idToken = idToken;
  query.expectedObjectClass = [GTLZeppaclientapiPhotoInfo class];
  return query;
}

+ (instancetype)queryForInsertZeppaEventWithObject:(GTLZeppaclientapiZeppaEvent *)object
                                           idToken:(NSString *)idToken {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"zeppaclientapi.insertZeppaEvent";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.idToken = idToken;
  query.expectedObjectClass = [GTLZeppaclientapiZeppaEvent class];
  return query;
}

+ (instancetype)queryForInsertZeppaEventToUserRelationshipWithObject:(GTLZeppaclientapiZeppaEventToUserRelationship *)object
                                                             idToken:(NSString *)idToken {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"zeppaclientapi.insertZeppaEventToUserRelationship";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.idToken = idToken;
  query.expectedObjectClass = [GTLZeppaclientapiZeppaEventToUserRelationship class];
  return query;
}

+ (instancetype)queryForInsertZeppaFeedbackWithObject:(GTLZeppaclientapiZeppaFeedback *)object
                                              idToken:(NSString *)idToken {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"zeppaclientapi.insertZeppaFeedback";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.idToken = idToken;
  query.expectedObjectClass = [GTLZeppaclientapiZeppaFeedback class];
  return query;
}

+ (instancetype)queryForInsertZeppaUserWithObject:(GTLZeppaclientapiZeppaUser *)object
                                          idToken:(NSString *)idToken {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"zeppaclientapi.insertZeppaUser";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.idToken = idToken;
  query.expectedObjectClass = [GTLZeppaclientapiZeppaUser class];
  return query;
}

+ (instancetype)queryForInsertZeppaUserToUserRelationshipWithObject:(GTLZeppaclientapiZeppaUserToUserRelationship *)object
                                                            idToken:(NSString *)idToken {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"zeppaclientapi.insertZeppaUserToUserRelationship";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.idToken = idToken;
  query.expectedObjectClass = [GTLZeppaclientapiZeppaUserToUserRelationship class];
  return query;
}

#pragma mark - "inviteGroupEndpoint" methods
// These create a GTLQueryZeppaclientapi object.

+ (instancetype)queryForInviteGroupEndpointInsertInviteGroupWithObject:(GTLZeppaclientapiInviteGroup *)object {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"zeppaclientapi.inviteGroupEndpoint.insertInviteGroup";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLZeppaclientapiInviteGroup class];
  return query;
}

#pragma mark - Service level methods
// These create a GTLQueryZeppaclientapi object.

+ (instancetype)queryForListDeviceInfoWithIdToken:(NSString *)idToken {
  NSString *methodName = @"zeppaclientapi.listDeviceInfo";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.idToken = idToken;
  query.expectedObjectClass = [GTLZeppaclientapiCollectionResponseDeviceInfo class];
  return query;
}

+ (instancetype)queryForListEventCommentWithIdToken:(NSString *)idToken {
  NSString *methodName = @"zeppaclientapi.listEventComment";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.idToken = idToken;
  query.expectedObjectClass = [GTLZeppaclientapiCollectionResponseEventComment class];
  return query;
}

+ (instancetype)queryForListEventTagWithIdToken:(NSString *)idToken {
  NSString *methodName = @"zeppaclientapi.listEventTag";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.idToken = idToken;
  query.expectedObjectClass = [GTLZeppaclientapiCollectionResponseEventTag class];
  return query;
}

+ (instancetype)queryForListEventTagFollowWithIdToken:(NSString *)idToken {
  NSString *methodName = @"zeppaclientapi.listEventTagFollow";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.idToken = idToken;
  query.expectedObjectClass = [GTLZeppaclientapiCollectionResponseEventTagFollow class];
  return query;
}

+ (instancetype)queryForListInviteGroupWithIdToken:(NSString *)idToken {
  NSString *methodName = @"zeppaclientapi.listInviteGroup";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.idToken = idToken;
  query.expectedObjectClass = [GTLZeppaclientapiCollectionResponseInviteGroup class];
  return query;
}

+ (instancetype)queryForListPhotoInfoWithIdToken:(NSString *)idToken {
  NSString *methodName = @"zeppaclientapi.listPhotoInfo";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.idToken = idToken;
  query.expectedObjectClass = [GTLZeppaclientapiCollectionResponsePhotoInfo class];
  return query;
}

+ (instancetype)queryForListZeppaEventWithIdToken:(NSString *)idToken {
  NSString *methodName = @"zeppaclientapi.listZeppaEvent";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.idToken = idToken;
  query.expectedObjectClass = [GTLZeppaclientapiCollectionResponseZeppaEvent class];
  return query;
}

+ (instancetype)queryForListZeppaEventToUserRelationshipWithIdToken:(NSString *)idToken {
  NSString *methodName = @"zeppaclientapi.listZeppaEventToUserRelationship";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.idToken = idToken;
  query.expectedObjectClass = [GTLZeppaclientapiCollectionResponseZeppaEventToUserRelationship class];
  return query;
}

+ (instancetype)queryForListZeppaNotificationWithIdToken:(NSString *)idToken {
  NSString *methodName = @"zeppaclientapi.listZeppaNotification";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.idToken = idToken;
  query.expectedObjectClass = [GTLZeppaclientapiCollectionResponseZeppaNotification class];
  return query;
}

+ (instancetype)queryForListZeppaUserInfoWithIdToken:(NSString *)idToken {
  NSString *methodName = @"zeppaclientapi.listZeppaUserInfo";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.idToken = idToken;
  query.expectedObjectClass = [GTLZeppaclientapiCollectionResponseZeppaUserInfo class];
  return query;
}

+ (instancetype)queryForListZeppaUserToUserRelationshipWithIdToken:(NSString *)idToken {
  NSString *methodName = @"zeppaclientapi.listZeppaUserToUserRelationship";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.idToken = idToken;
  query.expectedObjectClass = [GTLZeppaclientapiCollectionResponseZeppaUserToUserRelationship class];
  return query;
}

+ (instancetype)queryForRemoveCurrentZeppaUserWithIdToken:(NSString *)idToken {
  NSString *methodName = @"zeppaclientapi.removeCurrentZeppaUser";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.idToken = idToken;
  return query;
}

+ (instancetype)queryForRemoveDeviceInfoWithIdentifier:(long long)identifier
                                               idToken:(NSString *)idToken {
  NSString *methodName = @"zeppaclientapi.removeDeviceInfo";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.identifier = identifier;
  query.idToken = idToken;
  return query;
}

+ (instancetype)queryForRemoveEventTagWithTagId:(long long)tagId
                                        idToken:(NSString *)idToken {
  NSString *methodName = @"zeppaclientapi.removeEventTag";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.tagId = tagId;
  query.idToken = idToken;
  return query;
}

+ (instancetype)queryForRemoveEventTagFollowWithIdentifier:(long long)identifier
                                                   idToken:(NSString *)idToken {
  NSString *methodName = @"zeppaclientapi.removeEventTagFollow";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.identifier = identifier;
  query.idToken = idToken;
  return query;
}

+ (instancetype)queryForRemovePhotoInfoWithObject:(GTLZeppaclientapiKey *)object
                                          idToken:(NSString *)idToken {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"zeppaclientapi.removePhotoInfo";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.idToken = idToken;
  return query;
}

+ (instancetype)queryForRemoveZeppaEventWithIdentifier:(long long)identifier
                                               idToken:(NSString *)idToken {
  NSString *methodName = @"zeppaclientapi.removeZeppaEvent";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.identifier = identifier;
  query.idToken = idToken;
  return query;
}

+ (instancetype)queryForRemoveZeppaEventToUserRelationshipWithIdentifier:(long long)identifier
                                                                 idToken:(NSString *)idToken {
  NSString *methodName = @"zeppaclientapi.removeZeppaEventToUserRelationship";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.identifier = identifier;
  query.idToken = idToken;
  return query;
}

+ (instancetype)queryForRemoveZeppaNotificationWithIdentifier:(long long)identifier
                                                      idToken:(NSString *)idToken {
  NSString *methodName = @"zeppaclientapi.removeZeppaNotification";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.identifier = identifier;
  query.idToken = idToken;
  return query;
}

+ (instancetype)queryForRemoveZeppaUserToUserRelationshipWithIdentifier:(long long)identifier
                                                                idToken:(NSString *)idToken {
  NSString *methodName = @"zeppaclientapi.removeZeppaUserToUserRelationship";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.identifier = identifier;
  query.idToken = idToken;
  return query;
}

+ (instancetype)queryForUpdateDeviceInfoWithObject:(GTLZeppaclientapiDeviceInfo *)object
                                           idToken:(NSString *)idToken {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"zeppaclientapi.updateDeviceInfo";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.idToken = idToken;
  query.expectedObjectClass = [GTLZeppaclientapiDeviceInfo class];
  return query;
}

+ (instancetype)queryForUpdateZeppaEventToUserRelationshipWithObject:(GTLZeppaclientapiZeppaEventToUserRelationship *)object
                                                             idToken:(NSString *)idToken {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"zeppaclientapi.updateZeppaEventToUserRelationship";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.idToken = idToken;
  query.expectedObjectClass = [GTLZeppaclientapiZeppaEventToUserRelationship class];
  return query;
}

+ (instancetype)queryForUpdateZeppaNotificationWithObject:(GTLZeppaclientapiZeppaNotification *)object
                                                  idToken:(NSString *)idToken {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"zeppaclientapi.updateZeppaNotification";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.idToken = idToken;
  query.expectedObjectClass = [GTLZeppaclientapiZeppaNotification class];
  return query;
}

+ (instancetype)queryForUpdateZeppaUserWithObject:(GTLZeppaclientapiZeppaUser *)object
                                          idToken:(NSString *)idToken {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"zeppaclientapi.updateZeppaUser";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.idToken = idToken;
  query.expectedObjectClass = [GTLZeppaclientapiZeppaUser class];
  return query;
}

+ (instancetype)queryForUpdateZeppaUserToUserRelationshipWithObject:(GTLZeppaclientapiZeppaUserToUserRelationship *)object
                                                            idToken:(NSString *)idToken {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"zeppaclientapi.updateZeppaUserToUserRelationship";
  GTLQueryZeppaclientapi *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.idToken = idToken;
  query.expectedObjectClass = [GTLZeppaclientapiZeppaUserToUserRelationship class];
  return query;
}

@end
